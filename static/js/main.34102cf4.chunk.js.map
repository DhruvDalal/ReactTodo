{"version":3,"sources":["images/todo.svg","Todo.jsx","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","inputData","setInputData","localStorage","getItem","JSON","parse","items","setItems","toggleSubmit","setToggleSubmit","editItem","setEditItem","addItem","map","ele","id","name","allInputData","Date","getTime","toString","alert","useEffect","setItem","stringify","className","src","todo","alt","srcset","title","type","placeholder","value","onChange","e","target","onClick","currVal","newEditItem","find","elem","editTheItem","filter","arrElem","data-sm-link-text","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAAe,MAA0B,iC,OCyG1BA,EA5FF,WACX,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAXbG,aAAaC,QAAQ,SAErBC,KAAKC,MAAMH,aAAaC,QAAQ,UAGjC,IAMZ,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAwCR,oBAAS,GAAjD,mBAAOS,EAAP,KAAqBC,EAArB,KACA,EAA8BV,mBAAS,MAAvC,mBAAOW,EAAP,KAAgBC,EAAhB,KACMC,EAAU,WACd,GAAKZ,EAEC,GAAGA,IAAcQ,EACfD,EAASD,EAAMO,KAAI,SAACC,GAChB,OAAGA,EAAIC,KAAOL,EACH,2BAAII,GAAX,IAAeE,KAAMhB,IAElBc,MAEXL,GAAgB,GACrBR,EAAa,IACbU,EAAY,UACR,CACH,IAAMM,EAAe,CAACF,IAAI,IAAIG,MAAOC,UAAUC,WAAWJ,KAAOhB,GACnEO,EAAS,GAAD,mBAAKD,GAAL,CAAYW,KACpBhB,EAAa,SAdXoB,MAAO,qBAmCb,OAHEC,qBAAU,WACNpB,aAAaqB,QAAQ,QAAQnB,KAAKoB,UAAUlB,MAC9C,CAACA,IAEH,mCACE,qBAAKmB,UAAU,WAAf,SACE,sBAAKA,UAAU,YAAf,UACE,mCACE,qBAAKC,IAAKC,EAAMC,IAAI,WAAWC,OAAO,KACtC,4EAEF,sBAAKJ,UAAU,WAAWK,MAAM,YAAhC,UACE,uBACEC,KAAK,OACLC,YAAY,4BACZjB,GAAG,GACHkB,MAAOjC,EACPkC,SAAU,SAACC,GAAD,OAAOlC,EAAakC,EAAEC,OAAOH,UAExCzB,EACD,mBACEiB,UAAU,qBACVK,MAAM,WACNO,QAASzB,IACR,mBAAGa,UAAU,sBAAsBK,MAAM,YAAYO,QAAS,kBAAIzB,UAGvE,qBAAKa,UAAU,YAAf,SACKnB,EAAMO,KAAI,SAACyB,GACT,OACG,sBAAKb,UAAU,WAAf,UACN,6BAAKa,EAAQtB,OACb,sBAAKS,UAAU,WAAf,UACA,mBAAGA,UAAU,sBAAsBK,MAAM,YAAYO,QAAS,kBA3CpD,SAACtB,GAElB,IAAIwB,EAAcjC,EAAMkC,MAAK,SAACC,GAC1B,OAAOA,EAAK1B,KAAOA,KAEvBN,GAAgB,GAChBR,EAAasC,EAAYvB,MACzBL,EAAYI,GAoC6D2B,CAAYJ,EAAQvB,OACtF,mBAAGU,UAAU,2BAA2BK,MAAM,cAAcO,QAAS,kBAjD7DtB,EAiD4EuB,EAAQvB,QAhDtGR,EAASD,EAAMqC,QAAO,SAACC,GACnB,OAAOA,EAAQ7B,KAAOA,MAFT,IAACA,UA6C6BuB,EAAQvB,SAUjD,qBAAKU,UAAU,YAAf,SACE,wBAAQA,UAAU,eAAeoB,oBAAkB,oBAAeR,QAAS,WACvE9B,EAAS,KADb,SAGE,uECvFCuC,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.34102cf4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/todo.975e4dd4.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport todo from \"./images/todo.svg\";\r\n\r\nconst getLocalItems = () => {\r\n    let list = localStorage.getItem('lists');\r\n    if(list){\r\n        return JSON.parse(localStorage.getItem('lists'));\r\n    }\r\n    else{\r\n        return[];\r\n    }\r\n}\r\n\r\nconst Todo = () => {\r\n  const [inputData, setInputData] = useState(\"\");\r\n  const [items, setItems] = useState(getLocalItems());\r\n  const [toggleSubmit, setToggleSubmit] = useState(true);\r\n  const [editItem,setEditItem] =useState(null);\r\n  const addItem = () => {\r\n    if (!inputData) {\r\n        alert (\"please fill Data\")\r\n    }else if(inputData && !toggleSubmit) {\r\n            setItems(items.map((ele)=>{\r\n                if(ele.id === editItem){\r\n                    return {...ele,name: inputData}\r\n                }\r\n                return ele;\r\n            }))\r\n            setToggleSubmit(true);\r\n       setInputData(\"\");\r\n       setEditItem(null);\r\n    } else {\r\n        const allInputData = {id: new Date().getTime().toString(),name : inputData}\r\n      setItems([...items, allInputData]);\r\n      setInputData(\"\");\r\n    }\r\n  };\r\n  const deleteItem = (id) => {\r\n    setItems(items.filter((arrElem) => {\r\n        return arrElem.id !== id;\r\n      }));\r\n    };\r\n    const editTheItem = (id) => {\r\n        \r\n       let newEditItem = items.find((elem) => {\r\n           return elem.id === id;\r\n       });\r\n       setToggleSubmit(false);\r\n       setInputData(newEditItem.name);\r\n       setEditItem(id);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        localStorage.setItem('lists',JSON.stringify(items))\r\n    },[items])\r\n  return (\r\n    <>\r\n      <div className=\"main-div\">\r\n        <div className=\"child-div\">\r\n          <figure>\r\n            <img src={todo} alt=\"todologo\" srcset=\"\" />\r\n            <figcaption>Add your List Here ✌️</figcaption>\r\n          </figure>\r\n          <div className=\"addItems\" title=\"writeTodo\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"✍️ Add Items...\"\r\n              id=\"\"\r\n              value={inputData}\r\n              onChange={(e) => setInputData(e.target.value)}\r\n            />\r\n            {toggleSubmit?\r\n            <i\r\n              className=\"fa fa-plus add-btn\"\r\n              title=\"Add Item\"\r\n              onClick={addItem}\r\n            />:<i className=\"far fa-edit add-btn\" title=\"edit Item\" onClick={()=>addItem()}/>\r\n}\r\n          </div>\r\n          <div className=\"showItems\">\r\n             { items.map((currVal)=>{\r\n                 return (\r\n                    <div className=\"eachItem\" key={currVal.id}>\r\n              <h3>{currVal.name}</h3>\r\n              <div className=\"todo-btn\">\r\n              <i className=\"far fa-edit add-btn\" title=\"edit Item\" onClick={()=>editTheItem(currVal.id)}/>\r\n              <i className=\"far fa-trash-alt add-btn\" title=\"delete Item\" onClick={()=>deleteItem(currVal.id)}/>\r\n              </div>\r\n            </div> \r\n                 );\r\n             })}\r\n          </div>\r\n          <div className=\"showItems\">\r\n            <button className=\"btn effect04\" data-sm-link-text=\"Remove All ❌\" onClick={()=>{\r\n                setItems([])\r\n            }}>\r\n              <span>CHECK LIST ☑️</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import './App.css';\nimport Todo from './Todo';\n\nfunction App() {\n  return (\n    <Todo/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}